#!/usr/bin/env python3
# encoding: utf-8

import pandas as pd

from viz import color
from coo import Coo
from scaled_canvas import Canvas
from point import Point

# /opt/ros/melodic/include/radar_msgs/RadarTrackArray.h
# "MSG: radar_msgs/RadarTrack\n"
# "# All variables below are relative to the radar's frame of reference.\n"
# "# This message is not meant to be used alone but as part of a stamped or array message.\n"
# "\n"
# "uint16 track_id                             # The ID of this track generated by the radar. If\n"
# "                                            # the radar does not generate IDs, this is intended as\n"
# "                                            # a sequential identifier for each track in a scan.\n"
# "\n"
# "geometry_msgs/Polygon track_shape           # The shape and position of the detection. This polygon\n"
# "                                            # encompasses a 2D plane which approximates the size and\n"
# "                                            # shape of the detection based on the distance from the\n"
# "                                            # radar, the detection angle, the width of all detections\n"
# "                                            # grouped into this track, and the height of the radar's\n"
# "                                            # vertical field of view at the detection distance.\n"
# "\n"
# "geometry_msgs/Vector3 linear_velocity       # Only the x and y components are valid.\n"
# "geometry_msgs/Vector3 linear_acceleration   # Only the x component is valid.\n"
# "\n"
# "================================================================================\n"
# "MSG: geometry_msgs/Polygon\n"
# "#A specification of a polygon where the first and last points are assumed to be connected\n"
# "Point32[] points\n"
# "\n"

#// yaw_rate 是用角速度的z来计算的, z 是弧度radian ，这里是转换为角度: degree
#   float yaw_rate = static_cast<float>(pose_msg->pose().angular_velocity().z() * 180.0f / M_PI);

def load_radar_tracks(file):
    df = pd.read_csv(file, sep=" ", header=None, names=["time", "track_id", "polygon", "vx", "vy", "vz"])
    return df

class RadarTracklet:
    def __init__(self, track_time, track_id, vx, vy):
        self._track_time = track_time
        self._track_id = track_id
        self._polygon = []
        self._vx = vx
        self._vy = vy

    def add_polygon(self, polygon):
        positions = polygon.split(";")
        for p in positions:
            xyz = p.split(",")
            if len(xyz) == 3:
                self._polygon.append(Point(float(xyz[0]), float(xyz[1]), float(xyz[2])))
            else:
                print("Wrong poistion")

    @property
    def track_time(self):
        return self._track_time

    @property
    def track_id(self):
        return self._track_id

    @property
    def polygon(self):
        return self._polygon

    @property
    def vx(self):
        return self._vx

    @property
    def vy(self):
        return self._vy

    def __repr__(self):
        return "RadarTracklet(time:{}, id:{}, polygon:{}, vx:{}, vy:{})".format(self._track_time, self._track_id, self._polygon, self._vx, self._vy)

if __name__ == '__main__':
    df = load_radar_tracks("radar-detections.txt")

    for index, row in df.iterrows():
        track_time = row.time
        track_id = row.track_id
        polygon = row.polygon
        tracklet = RadarTracklet(track_time, track_id, row.vx, row.vy)
        tracklet.add_polygon(polygon)
        print(tracklet)
