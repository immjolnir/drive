project(eigen CXX)

add_header()

# Eigen
find_package(Eigen3 REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR})
message(STATUS "EIGEN3_INCLUDE_DIR: ${EIGEN3_INCLUDE_DIR}")
message(STATUS "EIGEN3_VERSION: ${EIGEN3_VERSION}")

# if(HAVE_CXX11)
#     if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND NOT ENABLE_PRECOMPILED_HEADERS)
#       add_extra_compiler_option(-Wsuggest-override)
#     elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
#       add_extra_compiler_option(-Winconsistent-missing-override)
#     endif()
# endif()

set(HEADER_FILES precomp.h)

set(SOURCE_FILES eigen_helper.cpp)
add_library(${PROJECT_NAME} STATIC ${SOURCE_FILES})

#
# https://stackoverflow.com/questions/16503418/precompiled-header-file-for-shared-library-project-using-gcc
# The message and the code you posted doesn't suggest that PCH can't be used with shared code.
# It tells you that you can't use a PCH file compiled with -fpic when compiling code without -fpic, and vice-versa. Same for -fpie.
# Depending on the architecture, -shared might imply -fpic or other such options.
# You need to pre-compile your headers with the same options as you will compile the rest of your code.
# If you want to be able to use PCH for both static and dynamic builds, you'll need (at least) two different sets of pre-compiled headers.
#
# https://github.com/opencv/opencv/issues/5944
# https://github.com/opencv/opencv/commit/c8ff7a486735f45f9dd4060111b71957c78142c6#diff-af3b638bc2a3e6c650974192a53c7291
# OCV_OPTION(ENABLE_PRECOMPILED_HEADERS "Use precompiled headers"                                  ON   IF (NOT IOS) )
#
# add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES})

##################################################################################
#          Use the precompiled headers to reduce the compilation time
#
# https://edgarluque.com/blog/cmake-precompiled-headers/
#   Notice we require a minimum cmake version of 3.16, this is due to target_precompile_headers being added in that version.
#
#   We add the command after the add_executable/add_library instructions to the private scope.
#   It's recommended to use the private scope to prevent precompiled headers appearing in an installed target,
#   consumers should decide whether they want to use precompiled headers or not.
#   Other references
# https://cmake.org/cmake/help/latest/command/target_precompile_headers.html
# https://stackoverflow.com/questions/148570/using-pre-compiled-headers-with-cmake
# https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html
#
##################################################################################
target_precompile_headers(${PROJECT_NAME} PRIVATE ${HEADER_FILES})

# How to make sure it does work?
# https://blog.csdn.net/fengbingchun/article/details/128993027
# cc1plus: warning: /home/zhishan/iwork/drive/build/modules/eigen/CMakeFiles/eigen.dir/cmake_pch.hxx.gch: created and used with different settings of %<-fpie%> [-Winvalid-pch]
#
get_target_property(var ${PROJECT_NAME} PRECOMPILE_HEADERS)
message("precompiled headers: ${var}")
#
# CMakeFiles/eigen.dir/cmake_pch.h
# /* generated by CMake */
#
# #pragma GCC system_header
# #ifdef __cplusplus
# #include "/home/any/drive/modules/eigen/precompiled_header.h"
# #endif // __cplusplus
#
#

set(TEST_FILES
    test_matrix.cpp
    test_geometry.cpp
    test_geometry_euler_angle.cpp
)

# On the basis of Gtest, creating the cases.
foreach(file ${TEST_FILES})
    add_example(${file} ${GTEST_BOTH_LIBRARIES} ${PROJECT_NAME})
endforeach()

add_footer()
